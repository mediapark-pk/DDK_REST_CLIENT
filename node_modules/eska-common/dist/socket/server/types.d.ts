import { ISocketMiddleware } from '../middleware/middleware';
export interface SocketRunnable {
    run(): any;
    shutdown(): any;
}
export interface IEmitter {
    on(event: string, listener: Function): any;
    emit(event: string, ...args: any[]): any;
    close(): any;
}
export declare enum SocketType {
    IO = 0,
    WEB = 1
}
export declare type AnyFunction = (...args: any[]) => any;
export declare type Listeners = Array<{
    channel: string;
    executor: AnyFunction;
}>;
export declare type ApiContainer = {
    [methodName: string]: AnyFunction;
};
export declare abstract class SocketServer<T extends IEmitter, SocketServerOptions> {
    readonly port: number;
    readonly config: SocketServerOptions;
    readonly middleware?: ISocketMiddleware<T>;
    protected heartbeatJob: any;
    protected heartbeatRate: number;
    protected listeners: Listeners;
    socket: T;
    constructor(port: number, config: SocketServerOptions, heartbeatRate: number, middleware: ISocketMiddleware<T>);
    protected enableHeartbeat(heartbeatRate: number): void;
    getSocket(): T;
    run(): void;
    shutdown(): void;
}
