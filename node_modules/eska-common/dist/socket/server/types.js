"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../config/config");
const message_1 = require("../model/message");
const heartbeat_1 = require("../model/heartbeat");
var SocketType;
(function (SocketType) {
    SocketType[SocketType["IO"] = 0] = "IO";
    SocketType[SocketType["WEB"] = 1] = "WEB";
})(SocketType = exports.SocketType || (exports.SocketType = {}));
class SocketServer {
    constructor(port, config, heartbeatRate = 0, middleware) {
        this.port = port;
        this.config = config;
        this.heartbeatRate = heartbeatRate;
        this.middleware = middleware;
        this.listeners = [];
    }
    enableHeartbeat(heartbeatRate) {
        this.heartbeatJob = setInterval(() => {
            const heartbeatData = new heartbeat_1.Heartbeat();
            const heartbeatMessage = new message_1.Message(message_1.MessageType.EVENT, config_1.SYSTEM_HEALTH_SOCKET_CHANNEL, heartbeatData);
            this.socket.emit(config_1.SYSTEM_HEALTH_SOCKET_CHANNEL, heartbeatMessage);
        }, heartbeatRate);
    }
    getSocket() {
        return this.socket;
    }
    run() {
        this.heartbeatRate && this.enableHeartbeat(this.heartbeatRate);
        this.middleware.socketServer = this.socket;
        this.socket.on('connection', (socket) => {
            if (this.middleware) {
                this.middleware.onConnect(socket);
                this.middleware.applyApi(socket);
            }
        });
        console.log('Socket server started successfully');
    }
    shutdown() {
        console.log('Stopping socket server...');
        if (this.socket) {
            clearInterval(this.heartbeatJob);
            this.socket.close();
            console.log('Socket server stopped successfully');
        }
    }
}
exports.SocketServer = SocketServer;
//# sourceMappingURL=types.js.map