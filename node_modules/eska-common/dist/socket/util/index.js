"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../server/types");
const config_1 = require("../config/config");
const message_1 = require("../model/message");
const api_1 = require("../decorator/api");
const response_1 = require("../model/response");
exports.initSocketListeners = (listeners, socket) => {
    listeners.length && listeners.forEach(listener => socket.on(listener.channel, (data) => listener.executor(data, socket)));
};
exports.onMessage = async (message, socket, type) => {
    const method = api_1.API_CONTAINER[message.code];
    if (method && typeof method === 'function' && message.headers.type === message_1.MessageType.REQUEST) {
        message.body = await method(message, socket);
        message.headers.type = message_1.MessageType.RESPONSE;
        exports.sendData(socket, message, type);
    }
    else {
        const errorMessage = exports.buildErrorMessage(message.headers.id, message.code);
        exports.sendData(socket, errorMessage, type);
    }
};
exports.sendData = (socket, data, socketType, channel = config_1.SOCKET_DEFAULT_MESSAGE_CHANNEL) => {
    socketType === types_1.SocketType.WEB
        ? socket.send(JSON.stringify(data))
        : socket.emit(channel, data);
};
exports.buildErrorMessage = (id, code) => {
    const errors = new response_1.ResponseEntity({ errors: ['Invalid request. Request code not found'] });
    return new message_1.Message(message_1.MessageType.RESPONSE, code, errors, id);
};
//# sourceMappingURL=index.js.map