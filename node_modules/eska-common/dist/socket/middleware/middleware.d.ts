import { AnyFunction, ApiContainer, IEmitter, Listeners, SocketType } from '../server/types';
export interface ISocketMiddleware<T> {
    apiMethods: ApiContainer;
    socketServer?: T;
    onConnect(socket: any): any;
    registerApi(channel: string, listener: AnyFunction): any;
    applyApi(socket: any): any;
    emitEvent(channel: string, data: any): any;
}
export declare class DefaultSocketMiddleware<T extends IEmitter> implements ISocketMiddleware<T> {
    apiMethods: ApiContainer;
    socketServer?: T;
    listeners: Listeners;
    type: SocketType;
    enableDefaultListeners: boolean;
    constructor(apiMethods: ApiContainer, enableDefaultListeners: boolean, type: SocketType, socketServer?: T);
    onConnect(socket: any): void;
    registerApi(channel: string, listener: AnyFunction): void;
    applyApi(socket: any): void;
    emitEvent(channel: string, data: any): void;
    private initDefaultListeners;
    private onIOMessage;
    private onWebMessage;
    private onMessage;
}
