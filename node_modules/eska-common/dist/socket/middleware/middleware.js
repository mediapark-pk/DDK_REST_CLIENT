"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../server/types");
const index_1 = require("../util/index");
const message_1 = require("../model/message");
const config_1 = require("../config/config");
const response_1 = require("../model/response");
const api_1 = require("../decorator/api");
const index_2 = require("../validator/index");
class DefaultSocketMiddleware {
    constructor(apiMethods, enableDefaultListeners = false, type, socketServer) {
        this.apiMethods = apiMethods;
        this.socketServer = socketServer;
        this.enableDefaultListeners = enableDefaultListeners;
        this.type = type;
        this.listeners = [];
        // this.onMessage = this.onMessage.bind(this);
        this.onIOMessage = this.onIOMessage.bind(this);
    }
    onConnect(socket) {
        // default implementation
    }
    registerApi(channel, listener) {
        this.listeners.push({ channel, executor: listener });
    }
    applyApi(socket) {
        this.enableDefaultListeners && this.initDefaultListeners(socket);
        index_1.initSocketListeners(this.listeners, socket);
    }
    emitEvent(channel, data) {
        this.socketServer.emit(channel, data);
    }
    initDefaultListeners(socket) {
        socket.on(config_1.SOCKET_DEFAULT_MESSAGE_CHANNEL, async (data) => {
            if (this.type === types_1.SocketType.WEB) {
                data = JSON.parse(data);
                await this.onWebMessage(data, socket);
            }
            else {
                await this.onIOMessage(data, socket);
            }
        });
    }
    // TODO: context!!!
    async onIOMessage(message, socket) {
        await index_1.onMessage(message, socket, types_1.SocketType.IO);
    }
    onWebMessage(message, socket) {
        index_1.onMessage(message, socket, types_1.SocketType.WEB);
    }
    onMessage(message, socket) {
        const method = api_1.API_CONTAINER[message.code];
        if (method && typeof method === 'function' && message.headers.type === message_1.MessageType.REQUEST) {
            message.body = method(message, socket);
            message.headers.type = message_1.MessageType.RESPONSE;
            index_1.sendData(socket, message, this.type);
        }
        else {
            const errors = new response_1.ResponseEntity({ errors: ['Invalid request. Request code not found'] });
            const errorMessage = new message_1.Message(message_1.MessageType.RESPONSE, message.code, errors, message.headers.id);
            index_1.sendData(socket, errorMessage, this.type);
        }
    }
}
__decorate([
    index_2.validate(types_1.SocketType.IO),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [message_1.Message, Object]),
    __metadata("design:returntype", Promise)
], DefaultSocketMiddleware.prototype, "onIOMessage", null);
__decorate([
    index_2.validate(types_1.SocketType.WEB),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [message_1.Message, Object]),
    __metadata("design:returntype", void 0)
], DefaultSocketMiddleware.prototype, "onWebMessage", null);
exports.DefaultSocketMiddleware = DefaultSocketMiddleware;
//# sourceMappingURL=middleware.js.map