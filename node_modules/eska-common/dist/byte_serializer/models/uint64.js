"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const modelType_1 = require("./modelType");
const types_1 = require("src/byte_serializer/types");
const SIZE = 8;
const BODY_BINARY_LENGTH = 64;
const BODY_BINARY_ALLOCATION = 32;
/* tslint:disable:no-magic-numbers */
class Uint64 extends modelType_1.ModelType {
    constructor() {
        super();
        this.length.body = SIZE;
        this.typeId = types_1.BufferTypesId.Uint64;
    }
    _stringNullGenerator(count) {
        let str = '';
        for (let i = 0; i < count; i++) {
            str = '0' + str;
        }
        return str;
    }
    read(buffer, offset) {
        offset += this.length.type;
        let firstPart = buffer.readUInt32BE(offset).toString(2);
        firstPart = this._stringNullGenerator(BODY_BINARY_ALLOCATION - firstPart.length) + firstPart;
        offset += 4;
        let secondPart = buffer.readUInt32BE(offset).toString(2);
        secondPart = this._stringNullGenerator(BODY_BINARY_ALLOCATION - secondPart.length) + secondPart;
        offset += 4;
        return {
            value: BigInt('0b' + firstPart + secondPart),
            offset: offset
        };
    }
    write(buffer, value, offset) {
        let bin = (value || 0).toString(2);
        bin = this._stringNullGenerator(BODY_BINARY_LENGTH - bin.length) + bin;
        offset = this.writeTypeId(buffer, offset);
        offset = buffer.writeUInt32BE(parseInt(bin.slice(0, BODY_BINARY_ALLOCATION), 2), offset);
        return buffer.writeUInt32BE(parseInt(bin.slice(BODY_BINARY_ALLOCATION, BODY_BINARY_LENGTH), 2), offset);
    }
    getLength(value) {
        return this.length.type + this.length.body;
    }
}
exports.Uint64 = Uint64;
/* tslint:enable */
//# sourceMappingURL=uint64.js.map