"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const modelType_1 = require("./modelType");
const types_1 = require("./../types");
const HEADER_LENGTH = 4;
class BufferArray extends modelType_1.ModelType {
    constructor(type) {
        super();
        this.length.head = HEADER_LENGTH;
        this.typeElement = type;
        this.typeId = types_1.BufferTypesId.BufferArray;
    }
    getLength(value) {
        return this.length.type + this.length.type + this.length.head + this.getBodyLength(value);
    }
    getBodyLength(value) {
        return value.reduce((size, item) => {
            return size + this.typeElement.getLength(item);
        }, 0);
    }
    writeArrayElementTypeId(buffer, elementTypeId, offset) {
        return buffer.writeUInt8(elementTypeId, offset);
    }
    writeHead(buffer, bodyLength, offset) {
        return buffer.writeUInt32BE(bodyLength, offset);
    }
    read(buffer, offset) {
        offset += this.length.type;
        const elementPrimitiveTypeId = buffer.readUInt8(offset);
        offset += this.length.type;
        const sizeBody = buffer.readUInt32BE(offset);
        const ElementPrimitiveTypeId = types_1.mapPrimitiveCode.get(elementPrimitiveTypeId);
        this.typeElement = new ElementPrimitiveTypeId();
        offset += this.length.head;
        const res = [];
        const end = offset + sizeBody;
        while (offset < end) {
            const result = this.typeElement.read(buffer, offset);
            res.push(result.value);
            offset = result.offset;
        }
        return {
            value: res,
            offset: offset
        };
    }
    write(buffer, value, offset) {
        this.length.body = this.getBodyLength(value);
        offset = this.writeTypeId(buffer, offset);
        offset = this.writeArrayElementTypeId(buffer, this.typeElement.typeId, offset);
        offset = this.writeHead(buffer, this.length.body, offset);
        value.forEach(element => {
            offset = this.typeElement.write(buffer, element, offset);
        });
        return offset;
    }
}
exports.BufferArray = BufferArray;
//# sourceMappingURL=array.js.map