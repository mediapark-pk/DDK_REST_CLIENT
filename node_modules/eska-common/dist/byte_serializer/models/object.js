"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const modelType_1 = require("./modelType");
const schema_1 = require("./../schema");
const types_1 = require("src/byte_serializer/types");
const HEADER_LENGTH = 1;
class BufferObject extends modelType_1.ModelType {
    constructor(schemaName) {
        super();
        this.length.head = HEADER_LENGTH;
        this.typeId = types_1.BufferTypesId.BufferObject;
        this.schemaName = schemaName;
    }
    getLength(object) {
        const bufferSize = this.length.type + this.length.head;
        const schema = schema_1.schemaStore.get(this.schemaName);
        return Object.keys(schema).reduce((size, key) => {
            return size + schema[key].getLength(object[key]);
        }, bufferSize);
    }
    read(buffer, offset) {
        const value = {};
        offset += this.length.type;
        const schemaId = buffer.readUInt8(offset);
        offset += this.length.head;
        const schema = schema_1.schemaStore.get(schemaId);
        Object.keys(schema).sort().forEach((key) => {
            const data = schema[key].read(buffer, offset);
            offset = data.offset;
            value[key] = data.value;
        });
        return {
            value,
            offset
        };
    }
    writeHead(buffer, schemaId, offset) {
        return buffer.writeUInt8(schemaId, offset);
    }
    write(buffer, object, offset) {
        const schemaId = this.schemaName;
        offset = this.writeTypeId(buffer, offset);
        offset = this.writeHead(buffer, schemaId, offset);
        const schema = schema_1.schemaStore.get(schemaId);
        Object.keys(schema).sort().forEach((key) => {
            offset = schema[key].write(buffer, object[key], offset);
        });
        return offset;
    }
}
exports.BufferObject = BufferObject;
//# sourceMappingURL=object.js.map